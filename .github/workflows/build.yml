name: build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  repository_dispatch:
    types: [build]

jobs:
  pre-filter:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v3
        id: changes
        if: github.event_name != 'push'
        with:
          filters: |
            spatial:
              - 'docs/spatial**'
            sc_imaging:
              - 'docs/sc-imaging**'

      - id: set-matrix
        shell: bash
        run: |
          BASE_GROUPS=$(jq -n -c '["by_datatype", "by_registry", "by_ontology"]')
          ADDITIONAL_GROUPS=[]

          if [[ "${{ github.event_name }}" == "push" ]]; then
            # Run everything on push
            ADDITIONAL_GROUPS=$(jq -n -c '["spatial", "sc_imaging"]')
          else
            # Otherwise check which paths changed
            if [[ "${{ steps.changes.outputs.spatial }}" == "true" ]]; then
              ADDITIONAL_GROUPS=$(jq -n -c --argjson groups "$ADDITIONAL_GROUPS" '$groups + ["spatial"]')
            fi
            if [[ "${{ steps.changes.outputs.sc_imaging }}" == "true" ]]; then
              ADDITIONAL_GROUPS=$(jq -n -c --argjson groups "$ADDITIONAL_GROUPS" '$groups + ["sc_imaging"]')
            fi
          fi

          # Combine base groups with any additional groups
          MATRIX=$(jq -n -c --argjson base "$BASE_GROUPS" --argjson additional "$ADDITIONAL_GROUPS" '{group: ($base + $additional)}')

          # Output as single line for GitHub Actions
          echo "matrix=$(echo "$MATRIX" | jq -c .)" >> $GITHUB_OUTPUT
          # Pretty print for debugging
          echo "Generated matrix:"
          echo "$MATRIX" | jq .

  test:
    needs: pre-filter
    runs-on: ubuntu-latest
    env:
      GITHUB_EVENT_NAME: ${{ github.event_name }}
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.pre-filter.outputs.matrix)}}
    timeout-minutes: 40

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Cache postgres
        id: cache-postgres
        uses: actions/cache@v4
        with:
          path: ~/postgres.tar
          key: cache-postgres-0
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - name: Cache postgres miss
        if: steps.cache-postgres.outputs.cache-hit != 'true'
        run: docker pull postgres:latest && docker image save postgres:latest --output ~/postgres.tar
      - name: Cache postgres use
        if: steps.cache-postgres.outputs.cache-hit == 'true'
        run: docker image load --input ~/postgres.tar

      - run: pip install "laminci@git+https://x-access-token:${{ secrets.LAMIN_BUILD_DOCS }}@github.com/laminlabs/laminci"
      - name: install postgres graphviz
        run: sudo apt-get -y install graphviz
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - run: nox -s lint
        if: ${{ matrix.python-version == '3.12' && matrix.group == 'unit' }}
      - run: nox -s "install(group='${{ matrix.group }}')"
      - run: nox -s "build(group='${{ matrix.group }}')"

      - name: upload docs
        if: ${{ matrix.group == 'by_datatype' || matrix.group == 'by_registry' || matrix.group == 'by_ontology' || matrix.group == 'spatial' || matrix.group == 'sc_imaging'}}
        uses: actions/upload-artifact@v4
        with:
          name: docs_${{ matrix.group }}
          path: docs_${{ matrix.group }}

  docs:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: checkout lndocs
        uses: actions/checkout@v4
        with:
          repository: laminlabs/lndocs
          ssh-key: ${{ secrets.READ_LNDOCS }}
          path: lndocs
          ref: main

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - run: pip install "laminci@git+https://x-access-token:${{ secrets.LAMIN_BUILD_DOCS }}@github.com/laminlabs/laminci"
      - run: nox -s "install(group='docs')"
      - uses: actions/download-artifact@v4
      - run: nox -s docs
      - uses: nwtgck/actions-netlify@v1.2
        with:
          publish-dir: "_build/html"
          production-deploy: ${{ github.event_name == 'push' }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          enable-commit-comment: false
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  notify:
    if: always()
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: voxmedia/github-action-slack-notify-build@v1
        if: ${{ needs.test.result == 'success' && github.event_name == 'repository_dispatch' }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_GITHUB_ACTION }}
        with:
          channel_id: C05FDBBFJ1F
          status: SUCCESS
          color: good
      - uses: voxmedia/github-action-slack-notify-build@v1
        if: ${{ needs.test.result == 'failure' && github.event_name == 'repository_dispatch' }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_GITHUB_ACTION }}
        with:
          channel_id: C05FDBBFJ1F
          status: FAILURE
          color: danger
